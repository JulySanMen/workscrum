{"ast":null,"code":"var _jsxFileName = \"/home/bryan/Documentos/Repositorios/workscrumproyect/src/components/NeuralNetworkCanvas/NeuralNetworkCanvas.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NeuralNetworkCanvas = () => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        // Configura el canvas y dibuja algo\n        ctx.fillStyle = '#0D3555';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n        ctx.fillStyle = '#0DA7A7';\n        ctx.font = '30px Arial';\n        ctx.fillText('Neural Network Visualization', 50, 50);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    id: \"neuralNetwork\",\n    width: 800,\n    height: 400\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 10\n  }, this);\n};\n_s(NeuralNetworkCanvas, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = NeuralNetworkCanvas;\nexport default NeuralNetworkCanvas;\nvar _c;\n$RefreshReg$(_c, \"NeuralNetworkCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","NeuralNetworkCanvas","_s","canvasRef","canvas","current","ctx","getContext","fillStyle","fillRect","width","height","font","fillText","ref","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/bryan/Documentos/Repositorios/workscrumproyect/src/components/NeuralNetworkCanvas/NeuralNetworkCanvas.tsx"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\n\nconst NeuralNetworkCanvas: React.FC = () => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (canvas) {\n      const ctx = canvas.getContext('2d');\n      if (ctx) {\n        // Configura el canvas y dibuja algo\n        ctx.fillStyle = '#0D3555';\n        ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n        ctx.fillStyle = '#0DA7A7';\n        ctx.font = '30px Arial';\n        ctx.fillText('Neural Network Visualization', 50, 50);\n      }\n    }\n  }, []);\n\n  return <canvas ref={canvasRef} id=\"neuralNetwork\" width={800} height={400}></canvas>;\n};\n\nexport default NeuralNetworkCanvas;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,MAAMC,mBAA6B,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC1C,MAAMC,SAAS,GAAGN,MAAM,CAAoB,IAAI,CAAC;EAEjDC,SAAS,CAAC,MAAM;IACd,MAAMM,MAAM,GAAGD,SAAS,CAACE,OAAO;IAChC,IAAID,MAAM,EAAE;MACV,MAAME,GAAG,GAAGF,MAAM,CAACG,UAAU,CAAC,IAAI,CAAC;MACnC,IAAID,GAAG,EAAE;QACP;QACAA,GAAG,CAACE,SAAS,GAAG,SAAS;QACzBF,GAAG,CAACG,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEL,MAAM,CAACM,KAAK,EAAEN,MAAM,CAACO,MAAM,CAAC;QAE/CL,GAAG,CAACE,SAAS,GAAG,SAAS;QACzBF,GAAG,CAACM,IAAI,GAAG,YAAY;QACvBN,GAAG,CAACO,QAAQ,CAAC,8BAA8B,EAAE,EAAE,EAAE,EAAE,CAAC;MACtD;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBAAOb,OAAA;IAAQc,GAAG,EAAEX,SAAU;IAACY,EAAE,EAAC,eAAe;IAACL,KAAK,EAAE,GAAI;IAACC,MAAM,EAAE;EAAI;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAS,CAAC;AACtF,CAAC;AAACjB,EAAA,CApBID,mBAA6B;AAAAmB,EAAA,GAA7BnB,mBAA6B;AAsBnC,eAAeA,mBAAmB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}