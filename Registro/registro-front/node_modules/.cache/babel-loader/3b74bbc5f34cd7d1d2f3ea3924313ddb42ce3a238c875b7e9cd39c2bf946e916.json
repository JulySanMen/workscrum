{"ast":null,"code":"const canvas = document.getElementById(\"neuralNetwork\");\nconst ctx = canvas.getContext(\"2d\");\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\nconst particles = [];\nconst particleCount = 100;\nclass Particle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 2;\n    this.speedX = Math.random() * 2 - 1;\n    this.speedY = Math.random() * 2 - 1;\n  }\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = \"#FFFFFF\"; // Color de los nodos\n    ctx.fill();\n  }\n  update() {\n    this.x += this.speedX;\n    this.y += this.speedY;\n    if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;\n    if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;\n  }\n}\nfunction connectParticles() {\n  for (let i = 0; i < particles.length; i++) {\n    for (let j = i; j < particles.length; j++) {\n      const distance = Math.hypot(particles[i].x - particles[j].x, particles[i].y - particles[j].y);\n      if (distance < 100) {\n        ctx.beginPath();\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.1)\";\n        ctx.lineWidth = 1;\n        ctx.moveTo(particles[i].x, particles[i].y);\n        ctx.lineTo(particles[j].x, particles[j].y);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n  }\n}\nfunction init() {\n  for (let i = 0; i < particleCount; i++) {\n    const x = Math.random() * canvas.width;\n    const y = Math.random() * canvas.height;\n    particles.push(new Particle(x, y));\n  }\n}\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  particles.forEach(particle => {\n    particle.update();\n    particle.draw();\n  });\n  connectParticles();\n  requestAnimationFrame(animate);\n}\ninit();\nanimate();","map":{"version":3,"names":["canvas","document","getElementById","ctx","getContext","width","window","innerWidth","height","innerHeight","particles","particleCount","Particle","constructor","x","y","radius","speedX","Math","random","speedY","draw","beginPath","arc","PI","fillStyle","fill","update","connectParticles","i","length","j","distance","hypot","strokeStyle","lineWidth","moveTo","lineTo","stroke","closePath","init","push","animate","clearRect","forEach","particle","requestAnimationFrame"],"sources":["/home/bryan/Documentos/Repositorios/workscrumproyect/src/components/Inicio/script.js"],"sourcesContent":["const canvas = document.getElementById(\"neuralNetwork\");\nconst ctx = canvas.getContext(\"2d\");\n\ncanvas.width = window.innerWidth;\ncanvas.height = window.innerHeight;\n\nconst particles = [];\nconst particleCount = 100;\n\nclass Particle {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.radius = 2;\n    this.speedX = Math.random() * 2 - 1;\n    this.speedY = Math.random() * 2 - 1;\n  }\n\n  draw() {\n    ctx.beginPath();\n    ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);\n    ctx.fillStyle = \"#FFFFFF\"; // Color de los nodos\n    ctx.fill();\n  }\n\n  update() {\n    this.x += this.speedX;\n    this.y += this.speedY;\n\n    if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;\n    if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;\n  }\n}\n\nfunction connectParticles() {\n  for (let i = 0; i < particles.length; i++) {\n    for (let j = i; j < particles.length; j++) {\n      const distance = Math.hypot(\n        particles[i].x - particles[j].x,\n        particles[i].y - particles[j].y\n      );\n      if (distance < 100) {\n        ctx.beginPath();\n        ctx.strokeStyle = \"rgba(255, 255, 255, 0.1)\";\n        ctx.lineWidth = 1;\n        ctx.moveTo(particles[i].x, particles[i].y);\n        ctx.lineTo(particles[j].x, particles[j].y);\n        ctx.stroke();\n        ctx.closePath();\n      }\n    }\n  }\n}\n\nfunction init() {\n  for (let i = 0; i < particleCount; i++) {\n    const x = Math.random() * canvas.width;\n    const y = Math.random() * canvas.height;\n    particles.push(new Particle(x, y));\n  }\n}\n\nfunction animate() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  particles.forEach((particle) => {\n    particle.update();\n    particle.draw();\n  });\n  connectParticles();\n  requestAnimationFrame(animate);\n}\n\ninit();\nanimate();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}